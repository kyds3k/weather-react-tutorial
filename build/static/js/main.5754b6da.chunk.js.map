{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Icon.js","components/WeatherCard/Condition.js","components/WeatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Icon","props","img","icon","condition","classname","src","alt","Condition","temp","Temp","State","WeatherCard","highColor","lowColor","bg","Card","WeatherEngine","location","useState","query","setQuery","error","setError","loading","setLoading","weather","setWeather","getWeather","q","a","async","fetch","apiRes","json","resJSON","main","name","sys","useEffect","style","color","onClick","value","onChange","e","target","preventDefault","handleSearch","App","className","Helmet","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5754b6da.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Location = ({ city, country }) => {\n  const Container = styled.div`\n    text-align: center;\n  `;\n\n  const City = styled.h1`\n    font-family: \"Merriweather\", sans-serif;\n    font-size: 1.6rem;\n  `;\n\n  const Country = styled.h3`\n    font-family: \"Fira Sans\", sans-serif;\n    font-size: 1.1rem;\n  `;\n\n  return (\n    <Container>\n      <City>{city}</City>\n      <Country>{country}</Country>\n    </Container>\n  );\n};\n\nexport default Location;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Icon = props => {\n  const Icon = styled.img`\n    width: 40%;\n  `;\n\n  let icon = \"\";\n\n  switch (props.condition) {\n    case \"Clouds\":\n      icon = `./img/Mostly Cloudy-2x.png`;\n      break;\n    case \"Clear\":\n      icon = `./img/Mostly Sunny-2x.png`;\n      break;\n    case \"Haze\":\n      icon = `./img/Haze-2x.png`;\n      break;\n    case \"Hail\":\n      icon = `./img/Hail-2x.png`;\n      break;\n    case \"Fog\":\n      icon = `./img/Fog-2x.png`;\n      break;\n    case \"Tornado\":\n      icon = `./img/Tornado-2x.png`;\n      break;\n    case \"Dust\":\n      icon = `./img/Dust-2x.png`;\n      break;\n    case \"Mist\":\n      icon = `./img/Fog-2x.png`;\n      break;\n    case \"Snow\":\n      icon = `./img/Snow-2x.png`;\n      break;\n    case \"Rain\":\n      icon = `./img/Rain-2x.png`;\n      break;\n    case \"Drizzle\":\n      icon = `./img/Drizzle-2x.png`;\n      break;\n    case \"Thunderstorm\":\n      icon = `./img/Severe Thunderstorm-2x.png`;\n      break;\n    case \"Clear Night\":\n      icon = `./img/Clear Night-2x.png`;\n      break;\n    default:\n      icon = `./img/Fog-2x.png`;\n      break;\n  }\n\n  return <Icon classname=\"icon\" src={icon} alt=\"Weather Icon\"></Icon>;\n};\n\nexport default Icon;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Condition = ({ temp, condition }) => {\n  const Temp = styled.h1`\n    font-family: \"Fira Sans\", sans-serif;\n    font-size: 2rem;\n    font-weight: 200;\n  `;\n\n  const State = styled.h3`\n    font-family: \"Merriweather\", sans-serif;\n    font-size: 1.2rem;\n  `;\n\n  return (\n    <>\n      <Temp>{temp} &deg;F</Temp>\n      <State>{condition}</State>\n    </>\n  );\n};\n\nexport default Condition;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Location from \"./Location\";\nimport Icon from \"./Icon\";\nimport Condition from \"./Condition\";\n\nconst WeatherCard = ({ temp, condition, city, country }) => {\n  let highColor = 0;\n  let lowColor = 0;\n  let bg = null;\n  if (temp > 32) {\n    highColor = (1 - (temp - 12) / 28) * 255;\n    lowColor = highColor - 150;\n    bg = `linear-gradient(\n      to top,\n      rgb(255, ${highColor}, 0),\n      rgb(255, ${lowColor}, 0)\n    );`;\n  } else if (temp <= 32) {\n    highColor = (1 - (temp + 20) / 32) * 255;\n    lowColor = highColor - 150;\n    bg = `linear-gradient(\n      to top,\n      rgb(0, ${highColor}, 255),\n      rgb(0, ${lowColor}, 255)\n    );`;\n  }\n\n  const Card = styled.div`\n    margin: 10px auto;\n    background: ${bg};\n    width: 200px;\n    height: 240px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 15px;\n  `;\n\n  return (\n    <Card>\n      <Location city={city} country={country} />\n      <Icon condition={condition} />\n      <Condition temp={temp} condition={condition} />\n    </Card>\n  );\n};\n\nexport default WeatherCard;\n","import React, { useState, useEffect } from \"react\";\nimport WeatherCard from \"./WeatherCard/component\";\n\nconst WeatherEngine = ({ location }) => {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [weather, setWeather] = useState({\n    temp: null,\n    city: null,\n    condition: null,\n    country: null\n  });\n\n  const getWeather = async q => {\n    setQuery(\"\");\n    setLoading(true);\n    try {\n      const apiRes = await fetch(\n        `//api.openweathermap.org/data/2.5/weather?q=${q}&APPID=b747622a24940adba2d44f32b1a44caf&units=imperial`\n      );\n      const resJSON = await apiRes.json();\n      setWeather({\n        temp: resJSON.main.temp,\n        city: resJSON.name,\n        condition: resJSON.weather[0].main,\n        country: resJSON.sys.country\n      });\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  const handleSearch = e => {\n    e.preventDefault();\n    getWeather(query);\n  };\n\n  useEffect(() => {\n    getWeather(location);\n  }, [location]);\n\n  return (\n    <div>\n      {!loading && !error ? (\n        <div>\n          <WeatherCard\n            temp={weather.temp}\n            city={weather.city}\n            country={weather.country}\n            condition={weather.condition}\n          />\n          <form>\n            <input value={query} onChange={e => setQuery(e.target.value)} />\n            <button onClick={e => handleSearch(e)}>Search</button>\n          </form>\n        </div>\n      ) : loading ? (\n        <div style={{ color: \"black\" }}>Loading</div>\n      ) : !loading && error ? (\n        <div>\n          There has been an error!\n          <br /> <button onClick={() => setError(false)}>Reset!</button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default WeatherEngine;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport \"./App.css\";\nimport WeatherEngine from \"./components/WeatherEngine\";\n\nconst TITLE = \"Fuckin' Weather Shit\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>{TITLE}</title>\n      </Helmet>\n      <WeatherEngine location=\"nairobi\" />\n      <WeatherEngine location=\"antarctica\" />\n      <WeatherEngine location=\"seattle\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}